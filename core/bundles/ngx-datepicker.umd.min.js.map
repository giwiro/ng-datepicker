{
  "version": 3,
  "file": "ngx-datepicker.umd.min.js",
  "sources": [
    "ng://ngx-datepicker/src/app/lib/service/date-picker.service.ts",
    "ng://ngx-datepicker/src/app/lib/components/date-picker-single/date-picker-single.component.ts",
    "ng://ngx-datepicker/src/app/lib/util/generate-matrix/generate-matrix.ts",
    "ng://ngx-datepicker/src/app/lib/components/abstract-calendar/abstract-calendar.component.ts",
    "ng://ngx-datepicker/src/app/lib/components/single-calendar/single-calendar.component.ts",
    "ng://ngx-datepicker/src/app/lib/components/ranged-calendar/ranged-calendar.component.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\n// Hack for typescript for aot packaging\nimport * as momentImported from 'moment'; const moment = momentImported;\n\nexport interface DatePickerLabels {\n  months: string[];\n  days: string[];\n}\n\nexport type FormatterToDateFunction = (input: any) => Date;\nexport type FormatterFromDateFunction = (d: Date) => any;\n\nconst DEFAULT_MONTHS_LABEL = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\n  'August', 'September', 'October', 'November', 'December'];\nconst DEFAULT_DAYS_LABEL = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n\n@Injectable()\nexport class DatePickerService {\n  private monthLabels: string[];\n  private daysLabels: string[];\n  private formatterToDate: string | FormatterToDateFunction;\n  private formatterFromDate: string | FormatterFromDateFunction;\n\n  constructor() {\n    // Set defaults\n    this.monthLabels = DEFAULT_MONTHS_LABEL;\n    this.daysLabels = DEFAULT_DAYS_LABEL;\n  }\n\n  public setFormatterToDate(f: string | FormatterToDateFunction): void {\n    this.formatterToDate = f;\n  }\n\n  public setFormatterFromDate(f: string | FormatterFromDateFunction): void {\n    this.formatterFromDate = f;\n  }\n\n  public formatToDate(input: any, auxFormatter?: string | FormatterToDateFunction): Date | any {\n    const formatter = auxFormatter || this.formatterToDate;\n    if (formatter instanceof Function) {\n      return formatter(input);\n    }else if (typeof formatter === 'string') {\n      return moment(input, formatter).toDate();\n    }else {\n      return input;\n    }\n  }\n\n  public formatFromDate(d: Date, auxFormatter?: string | FormatterFromDateFunction): any {\n    const formatter = auxFormatter || this.formatterFromDate;\n    if (formatter instanceof Function) {\n      return formatter(d);\n    }else if (typeof formatter === 'string') {\n      return moment(d).format(formatter);\n    }else {\n      return d;\n    }\n  }\n\n  public setLabels(l: Partial<DatePickerLabels>): void {\n    if (l.months) {\n      if (!(l.months instanceof Array)) {\n        return console.error(new Error('months must be an array'));\n      }\n      if (l.months.length !== 12) {\n        return console.error(new Error('months array\\'s length must be 12'));\n      }\n      this.monthLabels = [...l.months];\n    }\n\n    if (l.days) {\n      if (!(l.days instanceof Array)) {\n        return console.error(new Error('days must be an array'));\n      }\n      if (l.days.length !== 7) {\n        return console.error(new Error('days array\\'s length must be 7'));\n      }\n      this.daysLabels = [...l.days];\n    }\n  }\n\n  get labels(): DatePickerLabels {\n    return {\n      months: this.monthLabels,\n      days: this.daysLabels,\n    };\n  }\n}\n",
    "import {Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n// import { DatePickerSingleOptions } from './date-picker-single-options';\nimport { SingleCalendarOptions } from '../single-calendar/single-calendar-options';\nimport { ChangeChosenDayResponse } from '../single-calendar/single-calendar.component';\nimport { ChangeMonthResponse } from '../abstract-calendar/abstract-calendar.component';\nimport { FormatterFromDateFunction, FormatterToDateFunction } from '../../service/date-picker.service';\n\n@Component({\n  selector: 'app-date-picker-single',\n  template: `<div\n  class=\"date-picker-single-wrap\"\n  [class.hidden]=\"!isOpen()\">\n  <div class=\"date-picker-single-content\">\n    <app-single-calendar\n      [bindFormControl]=\"bindFormControl\"\n      [noChoose]=\"options.noChoose\"\n      [startChosenToday]=\"options.startChosenToday\"\n      [startViewportAtChosen]=\"options.startViewportAtChosen\"\n      [startViewportDate]=\"options.startViewportDate\"\n      [monthLabels]=\"options.monthLabels\"\n      [dayLabels]=\"options.dayLabels\"\n      [disableDatesBefore]=\"options.disableDatesBefore\"\n      [disableDatesAfter]=\"options.disableDatesAfter\"\n      [formatterToDate]=\"formatterToDate\"\n      [formatterFromDate]=\"formatterFromDate\"\n      (changeChosenDay)=\"onChangeChosenDay($event)\"\n      (changeMonth)=\"onChangeMonth($event)\">\n    </app-single-calendar>\n  </div>\n</div>\n`,\n  styles: [`:host {\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: absolute;\n  z-index: 1; }\n\ndiv.date-picker-single-wrap {\n  display: inline-block;\n  background-color: white;\n  overflow: hidden;\n  -webkit-transition: 200ms;\n  transition: 200ms;\n  max-height: 300px; }\n  div.date-picker-single-wrap.hidden {\n    max-height: 0; }\n  div.date-picker-single-wrap div.date-picker-single-content {\n    border: solid 1px grey;\n    padding: 15px; }\n`]\n})\nexport class DatePickerSingleComponent {\n  // weird error on typescript if i use DatePickerSingleOptions\n  @Input() options = {} as SingleCalendarOptions;\n  @Input() bindFormControl = new FormControl();\n  @Input() formatterToDate: string | FormatterToDateFunction;\n  @Input() formatterFromDate: string | FormatterFromDateFunction;\n  @Output() changeMonth = new EventEmitter<ChangeMonthResponse>();\n  @Output() changeChosenDay = new EventEmitter<ChangeChosenDayResponse>();\n  private open = false;\n\n  constructor() { }\n\n  public onChangeChosenDay(changeChosenDayResponse: ChangeChosenDayResponse): void {\n    this.changeChosenDay.emit(changeChosenDayResponse);\n  }\n\n  public onChangeMonth(changeMonthResponse: ChangeMonthResponse): void {\n    this.changeMonth.emit(changeMonthResponse);\n  }\n\n  public toggle() {\n    this.open = !this.open;\n  }\n\n  public show() {\n    this.open = true;\n  }\n\n  public hide() {\n    this.open = false;\n  }\n\n  public isOpen(): boolean {\n    return this.open;\n  }\n}\n",
    "// Limit: max date of month (28, 30 or 31)\nexport function buildCalendarMatrix(doom: number, limit: number = 31): number[][] {\n  const r = [];\n  let i = doom;\n  let n = 1;\n  let row = 0;\n  while (n <= limit) {\n    if (!r[row]) {\n      r[row] = [];\n    }\n    r[row][i] = n;\n    n++;\n    i++;\n    if (i > 6) {\n      row++;\n      i = 0;\n    }\n  }\n  return r;\n}\n",
    "import { OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { DatePickerService, DatePickerLabels } from '../../service/date-picker.service';\nimport { buildCalendarMatrix } from '../../util/generate-matrix/generate-matrix';\n\nexport interface ChangeMonthResponse {\n  action: 'next' | 'prev';\n  date: Date;\n}\n\nexport abstract class CalendarComponent implements OnInit {\n  @Input() startViewportDate: Date;\n  @Input() monthLabels: string[];\n  @Input() dayLabels: string[];\n  @Input() noControls: boolean;\n  @Input() disableDatesBefore: Date;\n  @Input() disableDatesAfter: Date;\n  @Output() changeMonth = new EventEmitter<ChangeMonthResponse>();\n  public matrix: number[][];\n  public currentDate: Date;\n  public labels: DatePickerLabels = {} as DatePickerLabels;\n\n  constructor(public datePickerService: DatePickerService) {\n    this.labels.months = this.datePickerService.labels.months;\n    this.labels.days = this.datePickerService.labels.days;\n  }\n\n  public abstract chooseDay(dateNumber: number): void;\n\n  ngOnInit() {\n    // Initialize labels\n    if (this.monthLabels && this.monthLabels instanceof Array && this.monthLabels.length === 12) {\n      this.labels.months = this.monthLabels;\n    }\n\n    if (this.dayLabels && this.dayLabels instanceof Array && this.dayLabels.length === 7) {\n      this.labels.days = this.dayLabels;\n    }\n  }\n\n  // Main function that controls the render of the month\n  public setCalendarViewport(date: Date): void {\n    const firstOfMonth = new Date(date.getFullYear(), date.getMonth(), 1);\n    const lastOfMonth = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n    this.currentDate = firstOfMonth;\n    this.matrix = buildCalendarMatrix(firstOfMonth.getDay(), lastOfMonth.getDate());\n  }\n\n  public nextMonth(): void {\n    const next = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() + 1, 1);\n    this.changeMonth.emit({\n      action: 'next',\n      date: next,\n    });\n    this.setCalendarViewport(next);\n  }\n\n  public prevMonth(): void {\n    const prev = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 1, 1);\n    this.changeMonth.emit({\n      action: 'prev',\n      date: prev,\n    });\n    this.setCalendarViewport(prev);\n  }\n\n  public isDisabledBeforeAfter(dateNumber: number): boolean {\n    const dateTime = new Date(this.currentDate.getFullYear(),\n      this.currentDate.getMonth(), dateNumber).setHours(0, 0, 0, 0);\n    if (this.disableDatesBefore && dateTime < this.disableDatesBefore.setHours(0, 0, 0, 0)) {\n      return true;\n    }\n    if (this.disableDatesAfter && dateTime > this.disableDatesAfter.setHours(0, 0, 0, 0)) {\n      return true;\n    }\n    return false;\n  }\n\n  public getCurrentMonthLabel(): string {\n    return this.labels.months[this.currentDate.getMonth()];\n  }\n\n}\n",
    "import { Component, Input, Output, EventEmitter, AfterContentInit, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Subscription } from 'rxjs/Subscription';\nimport { CalendarComponent } from '../abstract-calendar/abstract-calendar.component';\nimport {\n  DatePickerService,\n  FormatterToDateFunction,\n  FormatterFromDateFunction,\n} from '../../service/date-picker.service';\n\nexport interface ChangeChosenDayResponse {\n  date: Date;\n  formatted?: any;\n}\n\n@Component({\n  selector: 'app-single-calendar',\n  template: `<div *ngIf=\"currentDate && labels\" class=\"calendar-wrap\">\n  <div class=\"controls-wrap\" *ngIf=\"!noControls\">\n    <span class=\"prev-month\" (click)=\"prevMonth()\"><i class=\"arrow left\"></i></span>\n    <span class=\"next-month\" (click)=\"nextMonth()\" ><i class=\"arrow right\"></i></span>\n  </div>\n  <h5>{{getCurrentMonthLabel()}} {{currentDate.getFullYear()}}</h5>\n  <table>\n    <thead>\n    <tr>\n      <th scope=\"col\" *ngFor=\"let day of labels.days;\">\n        <span>{{day}}</span>\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let row of matrix; let i = index;\">\n      <td *ngFor=\"let d of row; let j = index\">\n        <div\n          class=\"overlay\"\n          *ngIf=\"d\"\n          [class.disabled]=\"isDisabledBeforeAfter(d)\"\n          [class.choosable]=\"!noChoose\"\n          [class.chosen]=\"isChosenDay(d)\"\n          (click)=\"chooseDay(d)\">\n          <span>{{d | padDayNumber}}</span>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n`,\n  styles: [`:host {\n  display: inline-block; }\n\ndiv.calendar-wrap {\n  display: inline-block;\n  background-color: transparent;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; }\n  div.calendar-wrap div.controls-wrap {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n    margin-bottom: -28px;\n    margin-top: 10px;\n    padding: 0 5px; }\n    div.calendar-wrap div.controls-wrap span {\n      cursor: pointer;\n      background: none;\n      border: none;\n      outline: none; }\n      div.calendar-wrap div.controls-wrap span i.arrow {\n        border: solid black;\n        border-width: 0 2px 2px 0;\n        display: inline-block;\n        padding: 5px; }\n        div.calendar-wrap div.controls-wrap span i.arrow.left {\n          transform: rotate(135deg);\n          -webkit-transform: rotate(135deg); }\n        div.calendar-wrap div.controls-wrap span i.arrow.right {\n          transform: rotate(-45deg);\n          -webkit-transform: rotate(-45deg); }\n  div.calendar-wrap h5 {\n    margin: 10px 0;\n    text-align: center; }\n  div.calendar-wrap table {\n    border-spacing: 0;\n    border-collapse: collapse; }\n    div.calendar-wrap table thead tr > th {\n      width: 33px;\n      height: 24px; }\n      div.calendar-wrap table thead tr > th span {\n        font-weight: 400;\n        font-size: 15px; }\n    div.calendar-wrap table tbody tr td {\n      width: 33px;\n      height: 24px;\n      text-align: center; }\n      div.calendar-wrap table tbody tr td:last-child > div.overlay.ranged {\n        border-top-right-radius: 45%;\n        border-bottom-right-radius: 45%; }\n      div.calendar-wrap table tbody tr td:first-child > div.overlay.ranged {\n        border-top-left-radius: 45%;\n        border-bottom-left-radius: 45%; }\n        div.calendar-wrap table tbody tr td:first-child > div.overlay.ranged:before {\n          content: normal; }\n      div.calendar-wrap table tbody tr td:first-child > div.overlay.chosen-right:before {\n        content: normal; }\n      div.calendar-wrap table tbody tr td div.overlay {\n        width: 26px;\n        height: 25px;\n        border-radius: 50%;\n        position: relative;\n        margin: auto;\n        box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        -webkit-box-sizing: border-box; }\n        div.calendar-wrap table tbody tr td div.overlay.disabled {\n          pointer-events: none;\n          cursor: not-allowed; }\n          div.calendar-wrap table tbody tr td div.overlay.disabled span {\n            color: #e0e0e0; }\n        div.calendar-wrap table tbody tr td div.overlay.choosable {\n          cursor: pointer; }\n          div.calendar-wrap table tbody tr td div.overlay.choosable:hover {\n            background-color: #11AEFA; }\n            div.calendar-wrap table tbody tr td div.overlay.choosable:hover.ranged {\n              border: solid 1px red; }\n              div.calendar-wrap table tbody tr td div.overlay.choosable:hover.ranged:before {\n                top: -1px; }\n            div.calendar-wrap table tbody tr td div.overlay.choosable:hover span {\n              color: white;\n              font-size: 15px;\n              font-weight: 300; }\n        div.calendar-wrap table tbody tr td div.overlay.ranged {\n          width: 33px;\n          background-color: #e0e0e0;\n          border-radius: 0; }\n          div.calendar-wrap table tbody tr td div.overlay.ranged:before {\n            content: '';\n            position: absolute;\n            width: 16.5px;\n            height: 25px;\n            left: -16.5px;\n            background: #e0e0e0;\n            z-index: -1; }\n          div.calendar-wrap table tbody tr td div.overlay.ranged.first-day {\n            border-top-left-radius: 45%;\n            border-bottom-left-radius: 45%; }\n            div.calendar-wrap table tbody tr td div.overlay.ranged.first-day:before {\n              content: normal; }\n        div.calendar-wrap table tbody tr td div.overlay.chosen {\n          background-color: #11AEFA !important; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen span {\n            color: white !important;\n            font-size: 15px !important;\n            font-weight: 300 !important; }\n        div.calendar-wrap table tbody tr td div.overlay.chosen-left {\n          background-color: #11AEFA !important; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-left span {\n            color: white !important;\n            font-size: 15px !important;\n            font-weight: 300 !important; }\n        div.calendar-wrap table tbody tr td div.overlay.chosen-right {\n          background-color: #11AEFA !important; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-right:before {\n            content: '';\n            position: absolute;\n            width: 33px;\n            height: 25px;\n            left: -23px;\n            background: #e0e0e0;\n            z-index: -1; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-right.first-day:before {\n            content: normal; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-right span {\n            color: white !important;\n            font-size: 15px !important;\n            font-weight: 300 !important; }\n        div.calendar-wrap table tbody tr td div.overlay span {\n          line-height: 25px;\n          color: black;\n          font-size: 15px;\n          font-weight: 100;\n          vertical-align: middle; }\n`]\n})\nexport class SingleCalendarComponent extends CalendarComponent implements AfterContentInit, OnDestroy {\n  public chosenDate: Date;\n  private valueChangesSubscription: Subscription;\n  @Input() noChoose = false;\n  @Input() startChosenToday = false;\n  @Input() startViewportAtChosen = true;\n  @Input() formatterToDate: string | FormatterToDateFunction;\n  @Input() formatterFromDate: string | FormatterFromDateFunction;\n  @Input() bindFormControl: FormControl = new FormControl();\n  @Output() changeChosenDay = new EventEmitter<ChangeChosenDayResponse>();\n\n  constructor(public datePickerService: DatePickerService) {\n    super(datePickerService);\n  }\n\n  ngAfterContentInit() {\n    this.currentDate = new Date();\n    if (this.startChosenToday) {\n      this.bindFormControl.setValue(new Date((new Date()).setHours(0, 0, 0, 0)));\n    }\n    if (this.bindFormControl.value) {\n      this.chosenDate = this.datePickerService.formatToDate(this.bindFormControl.value, this.formatterToDate);\n      if (this.startViewportAtChosen) {\n        this.currentDate = this.chosenDate;\n      }\n    }\n    this.valueChangesSubscription = this.bindFormControl.valueChanges.subscribe(v => {\n      const c = this.datePickerService.formatToDate(v, this.formatterToDate);\n      if (!(c instanceof Date)) {\n        return console.error(new Error('value is not instance of Date'));\n      }\n      this.chosenDate = new Date(c.setHours(0, 0, 0, 0));\n    });\n    this.setCalendarViewport(this.currentDate);\n  }\n\n  ngOnDestroy() {\n    if (this.valueChangesSubscription) {\n      this.valueChangesSubscription.unsubscribe();\n    }\n  }\n\n  public chooseDay(dateNumber: number): void {\n    if (this.noChoose) {\n      return;\n    }\n    if (this.isDisabledBeforeAfter(dateNumber)) {\n      return console.error(new Error('Coudn\\'t set chosen day because date is disabled'));\n    }\n    this.chosenDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), dateNumber);\n    const formattedDate = this.datePickerService.formatFromDate(this.chosenDate, this.formatterFromDate);\n    this.bindFormControl.setValue(formattedDate, { emitEvent: true });\n    this.changeChosenDay.emit({\n      date: new Date(this.chosenDate.getTime()),\n      formatted: formattedDate,\n    });\n  }\n\n  /* public setChosenDay(date: Date): void {\n    if (this.isDisabledBeforeAfter(date.getDate())) {\n      return console.error(new Error('Coudn\\'t set chosen day because date is disabled'));\n    }\n    this.chosenDate = new Date(date.setHours(0, 0, 0, 0));\n    this.bindFormControl.setValue(this.chosenDate, { emitEvent: true });\n  }*/\n\n  public isChosenDay(dateNumber: number): boolean {\n    if (!this.chosenDate) {\n      return false;\n    }\n    return this.chosenDate.getFullYear() === this.currentDate.getFullYear() &&\n      this.chosenDate.getMonth() === this.currentDate.getMonth() &&\n      this.chosenDate.getDate() === dateNumber;\n  }\n\n  get value(): Date {\n    const d = this.chosenDate ? new Date(this.chosenDate.getTime()) : undefined;\n    return d ? this.datePickerService.formatFromDate(d) : d;\n  }\n}\n",
    "import { Component, Input, Output, EventEmitter, AfterContentInit, OnDestroy } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { CalendarComponent } from '../abstract-calendar/abstract-calendar.component';\nimport {\n  DatePickerService,\n  FormatterFromDateFunction,\n  FormatterToDateFunction,\n} from '../../service/date-picker.service';\n\n// export type RangedDaySide = 'left' | 'right';\nexport enum RangedDaySide {\n  LEFT = 'left',\n  RIGHT = 'right',\n}\n\nexport interface ChangeChosenRangedDaysResponse {\n  // If not left, then right\n  side: RangedDaySide;\n  date: Date;\n  formatted?: any;\n}\n\n@Component({\n  selector: 'app-ranged-calendar',\n  template: `<div *ngIf=\"currentDate && labels\" class=\"calendar-wrap\">\n  <div class=\"controls-wrap\" *ngIf=\"!noControls\">\n    <span class=\"prev-month\" (click)=\"prevMonth()\"><i class=\"arrow left\"></i></span>\n    <span class=\"next-month\" (click)=\"nextMonth()\" ><i class=\"arrow right\"></i></span>\n  </div>\n  <h5>{{getCurrentMonthLabel()}} {{currentDate.getFullYear()}}</h5>\n  <table>\n    <thead>\n    <tr>\n      <th scope=\"col\" *ngFor=\"let day of labels.days;\">\n        <span>{{day}}</span>\n      </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr *ngFor=\"let row of matrix; let i = index;\">\n      <td *ngFor=\"let d of row; let j = index\">\n        <div\n          class=\"overlay\"\n          *ngIf=\"d\"\n          [class.first-day]=\"d === 1\"\n          [class.disabled]=\"isDisabledBeforeAfter(d)\"\n          [class.choosable]=\"!noChoose\"\n          [class.chosen-left]=\"isChosenLeftDay(d)\"\n          [class.chosen-right]=\"isChosenRightDay(d)\"\n          [class.ranged]=\"isWithinRange(d)\"\n          (click)=\"chooseDay(d)\">\n          <span>{{d | padDayNumber}}</span>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n  </table>\n</div>\n`,\n  styles: [`:host {\n  display: inline-block; }\n\ndiv.calendar-wrap {\n  display: inline-block;\n  background-color: transparent;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif; }\n  div.calendar-wrap div.controls-wrap {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-pack: justify;\n        -ms-flex-pack: justify;\n            justify-content: space-between;\n    margin-bottom: -28px;\n    margin-top: 10px;\n    padding: 0 5px; }\n    div.calendar-wrap div.controls-wrap span {\n      cursor: pointer;\n      background: none;\n      border: none;\n      outline: none; }\n      div.calendar-wrap div.controls-wrap span i.arrow {\n        border: solid black;\n        border-width: 0 2px 2px 0;\n        display: inline-block;\n        padding: 5px; }\n        div.calendar-wrap div.controls-wrap span i.arrow.left {\n          transform: rotate(135deg);\n          -webkit-transform: rotate(135deg); }\n        div.calendar-wrap div.controls-wrap span i.arrow.right {\n          transform: rotate(-45deg);\n          -webkit-transform: rotate(-45deg); }\n  div.calendar-wrap h5 {\n    margin: 10px 0;\n    text-align: center; }\n  div.calendar-wrap table {\n    border-spacing: 0;\n    border-collapse: collapse; }\n    div.calendar-wrap table thead tr > th {\n      width: 33px;\n      height: 24px; }\n      div.calendar-wrap table thead tr > th span {\n        font-weight: 400;\n        font-size: 15px; }\n    div.calendar-wrap table tbody tr td {\n      width: 33px;\n      height: 24px;\n      text-align: center; }\n      div.calendar-wrap table tbody tr td:last-child > div.overlay.ranged {\n        border-top-right-radius: 45%;\n        border-bottom-right-radius: 45%; }\n      div.calendar-wrap table tbody tr td:first-child > div.overlay.ranged {\n        border-top-left-radius: 45%;\n        border-bottom-left-radius: 45%; }\n        div.calendar-wrap table tbody tr td:first-child > div.overlay.ranged:before {\n          content: normal; }\n      div.calendar-wrap table tbody tr td:first-child > div.overlay.chosen-right:before {\n        content: normal; }\n      div.calendar-wrap table tbody tr td div.overlay {\n        width: 26px;\n        height: 25px;\n        border-radius: 50%;\n        position: relative;\n        margin: auto;\n        box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        -webkit-box-sizing: border-box; }\n        div.calendar-wrap table tbody tr td div.overlay.disabled {\n          pointer-events: none;\n          cursor: not-allowed; }\n          div.calendar-wrap table tbody tr td div.overlay.disabled span {\n            color: #e0e0e0; }\n        div.calendar-wrap table tbody tr td div.overlay.choosable {\n          cursor: pointer; }\n          div.calendar-wrap table tbody tr td div.overlay.choosable:hover {\n            background-color: #11AEFA; }\n            div.calendar-wrap table tbody tr td div.overlay.choosable:hover.ranged {\n              border: solid 1px red; }\n              div.calendar-wrap table tbody tr td div.overlay.choosable:hover.ranged:before {\n                top: -1px; }\n            div.calendar-wrap table tbody tr td div.overlay.choosable:hover span {\n              color: white;\n              font-size: 15px;\n              font-weight: 300; }\n        div.calendar-wrap table tbody tr td div.overlay.ranged {\n          width: 33px;\n          background-color: #e0e0e0;\n          border-radius: 0; }\n          div.calendar-wrap table tbody tr td div.overlay.ranged:before {\n            content: '';\n            position: absolute;\n            width: 16.5px;\n            height: 25px;\n            left: -16.5px;\n            background: #e0e0e0;\n            z-index: -1; }\n          div.calendar-wrap table tbody tr td div.overlay.ranged.first-day {\n            border-top-left-radius: 45%;\n            border-bottom-left-radius: 45%; }\n            div.calendar-wrap table tbody tr td div.overlay.ranged.first-day:before {\n              content: normal; }\n        div.calendar-wrap table tbody tr td div.overlay.chosen {\n          background-color: #11AEFA !important; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen span {\n            color: white !important;\n            font-size: 15px !important;\n            font-weight: 300 !important; }\n        div.calendar-wrap table tbody tr td div.overlay.chosen-left {\n          background-color: #11AEFA !important; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-left span {\n            color: white !important;\n            font-size: 15px !important;\n            font-weight: 300 !important; }\n        div.calendar-wrap table tbody tr td div.overlay.chosen-right {\n          background-color: #11AEFA !important; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-right:before {\n            content: '';\n            position: absolute;\n            width: 33px;\n            height: 25px;\n            left: -23px;\n            background: #e0e0e0;\n            z-index: -1; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-right.first-day:before {\n            content: normal; }\n          div.calendar-wrap table tbody tr td div.overlay.chosen-right span {\n            color: white !important;\n            font-size: 15px !important;\n            font-weight: 300 !important; }\n        div.calendar-wrap table tbody tr td div.overlay span {\n          line-height: 25px;\n          color: black;\n          font-size: 15px;\n          font-weight: 100;\n          vertical-align: middle; }\n`]\n})\nexport class RangedCalendarComponent extends CalendarComponent implements AfterContentInit, OnDestroy {\n  @Input() side = RangedDaySide.LEFT;\n  @Input() noChoose = false;\n  @Input() startChosenLeftToday = false;\n  @Input() bindLeftFormControl: FormControl = new FormControl();\n  @Input() bindRightFormControl: FormControl = new FormControl();\n  @Input() formatterToDate: string | FormatterToDateFunction;\n  @Input() formatterFromDate: string | FormatterFromDateFunction;\n  @Output() changeChosenDay = new EventEmitter<ChangeChosenRangedDaysResponse>();\n  public chosenLeftDay: Date;\n  public chosenRightDay: Date;\n\n  constructor(public datePickerService: DatePickerService) {\n    super(datePickerService);\n  }\n\n  ngOnDestroy() {\n\n  }\n\n  ngAfterContentInit() {\n    this.currentDate = new Date();\n    if (this.startChosenLeftToday) {\n      this.chosenLeftDay = new Date(this.currentDate.setHours(0, 0, 0, 0));\n      this.side = RangedDaySide.RIGHT;\n    }\n    const l: Date = this.datePickerService.formatToDate(this.bindLeftFormControl.value, this.formatterToDate);\n    const r: Date = this.datePickerService.formatToDate(this.bindRightFormControl.value, this.formatterToDate);\n    if (l && r) {\n      if (r.getTime() < l.getTime()) {\n        console.error(new Error('right value must be more than left'));\n        this.chosenLeftDay = l;\n        this.bindRightFormControl.setValue(null);\n        this.side = RangedDaySide.RIGHT;\n      }else {\n        this.chosenLeftDay = l;\n        this.chosenRightDay = r;\n        this.side = RangedDaySide.RIGHT;\n      }\n    }else {\n      if (l) {\n        this.chosenLeftDay = l;\n        this.side = RangedDaySide.RIGHT;\n      }else if (r) {\n        this.chosenRightDay = r;\n        this.side = RangedDaySide.LEFT;\n      }\n    }\n    this.setCalendarViewport(this.currentDate);\n  }\n\n  public chooseDay(dateNumber: number): void {\n    if (this.noChoose) {\n      return;\n    }\n    if (this.isDisabledBeforeAfter(dateNumber)) {\n      return console.error(new Error('Coudn\\'t set chosen day because date is disabled'));\n    }\n    const chosen = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), dateNumber);\n    if ((this.side === RangedDaySide.RIGHT &&\n          this.bindLeftFormControl.value &&\n          chosen.getTime() <= this.chosenLeftDay.getTime()) ||\n        (this.side === RangedDaySide.LEFT &&\n          this.bindRightFormControl.value &&\n          chosen.getTime() >= this.chosenRightDay.getTime())) {\n      this.side = RangedDaySide.LEFT;\n      this.chosenRightDay = undefined;\n      this.bindRightFormControl.setValue(null);\n    }\n    const formattedDate = this.datePickerService.formatFromDate(chosen, this.formatterFromDate);\n    const response: ChangeChosenRangedDaysResponse = {\n      side: this.side,\n      date: chosen,\n      formatted: formattedDate,\n    };\n    if (this.side === RangedDaySide.LEFT) {\n      this.chosenLeftDay = chosen;\n      this.bindLeftFormControl.setValue(formattedDate, { emitEvent: true });\n      this.side = RangedDaySide.RIGHT;\n    }else {\n      this.chosenRightDay = chosen;\n      this.bindRightFormControl.setValue(formattedDate, { emitEvent: true });\n      // Side is not changing after set the right one\n    }\n    this.changeChosenDay.emit(response);\n  }\n\n  public isChosenLeftDay(dateNumber: number): boolean {\n    if (!this.chosenLeftDay) {\n      return false;\n    }\n    return this.chosenLeftDay.getFullYear() === this.currentDate.getFullYear() &&\n      this.chosenLeftDay.getMonth() === this.currentDate.getMonth() &&\n      this.chosenLeftDay.getDate() === dateNumber;\n  }\n\n  public isChosenRightDay(dateNumber: number): boolean {\n    if (!this.chosenRightDay) {\n      return false;\n    }\n    return this.chosenRightDay.getFullYear() === this.currentDate.getFullYear() &&\n      this.chosenRightDay.getMonth() === this.currentDate.getMonth() &&\n      this.chosenRightDay.getDate() === dateNumber;\n  }\n\n  public isWithinRange(dateNumber: number): boolean {\n    if (!this.chosenLeftDay || !this.chosenRightDay) {\n      return false;\n    }\n    const c = (new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), dateNumber))\n      .setHours(0, 0, 0, 0);\n    return c > this.chosenLeftDay.getTime() &&\n      c < this.chosenRightDay.getTime();\n  }\n\n  get value(): [Date, Date] {\n    const dl = this.chosenLeftDay ? new Date(this.chosenLeftDay.getTime()) : undefined;\n    const rl = this.chosenRightDay ? new Date(this.chosenRightDay.getTime()) : undefined;\n    return [dl, rl];\n  }\n\n}\n"
  ],
  "names": [
    "moment",
    "momentImported",
    "DEFAULT_MONTHS_LABEL",
    "this",
    "monthLabels",
    "DatePickerService",
    "prototype",
    "setFormatterToDate",
    "f",
    "setFormatterFromDate",
    "formatterFromDate",
    "formatToDate",
    "input",
    "auxFormatter",
    "formatter",
    "formatterToDate",
    "Function",
    "formatFromDate",
    "d",
    "setLabels",
    "l",
    "months",
    "Array",
    "console",
    "error",
    "Error",
    "length",
    "slice",
    "days",
    "daysLabels",
    "Object",
    "defineProperty",
    "decorators",
    "type",
    "Injectable",
    "ctorParameters",
    "DatePickerSingleComponent",
    "changeChosenDay",
    "emit",
    "changeChosenDayResponse",
    "onChangeMonth",
    "changeMonthResponse",
    "changeMonth",
    "toggle",
    "open",
    "show",
    "hide",
    "bindFormControl",
    "Input",
    "CalendarComponent",
    "datePickerService",
    "EventEmitter",
    "labels",
    "ngOnInit",
    "lastOfMonth",
    "Date",
    "date",
    "getFullYear",
    "getMonth",
    "row",
    "n",
    "limit",
    "i",
    "nextMonth",
    "next",
    "currentDate",
    "action",
    "prevMonth",
    "prev",
    "isDisabledBeforeAfter",
    "dateNumber",
    "dateTime",
    "setHours",
    "propDecorators",
    "startViewportDate",
    "dayLabels",
    "noControls",
    "disableDatesBefore",
    "SingleCalendarComponent",
    "_super",
    "_this",
    "noChoose",
    "startChosenToday",
    "__extends",
    "ngAfterContentInit",
    "startViewportAtChosen",
    "valueChangesSubscription",
    "valueChanges",
    "subscribe",
    "v",
    "chosenDate",
    "c",
    "setCalendarViewport",
    "ngOnDestroy",
    "chooseDay",
    "formattedDate",
    "setValue",
    "emitEvent",
    "getTime",
    "formatted",
    "isChosenDay",
    "get",
    "undefined",
    "enumerable",
    "configurable",
    "Output",
    "RangedDaySide",
    "RangedCalendarComponent",
    "startChosenLeftToday",
    "PadDayNumberPipe",
    "s",
    "DatePickerSingleDirective",
    "control",
    "viewContainerRef",
    "resolver",
    "factory",
    "resolveComponentFactory",
    "componentRef",
    "createComponent",
    "component",
    "instance",
    "onChangeChosenDaySubscription",
    "val",
    "onChangeChosenDay",
    "options",
    "closeOnChangeDay",
    "onChangeMonthSubscription",
    "unsubscribe",
    "destroy",
    "onFocus",
    "value",
    "isDisabled",
    "onClickOutside",
    "$event",
    "target",
    "el",
    "closeOnClickOutside",
    "Directive",
    "args",
    "selector",
    "HostListener",
    "DatePickerModule",
    "ngModule",
    "providers"
  ],
  "mappings": "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"
}
